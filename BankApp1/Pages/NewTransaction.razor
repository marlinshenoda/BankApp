@page "/transactions"
@inject IAccountService AccountService
@inject ISignInService SignInService

<h3>Bank Transactions</h3>

@if (_accounts == null)
{
    <p>Loading accounts...</p>
}
else if (!_accounts.Any())
{
    <p>No accounts found for your user.</p>
}
else
{
    <hr />
    <div class="transaction-section mb-4">
        <h4>Deposit</h4>

        <select @bind="DepositModel.AccountId" class="form-select mb-2">
            <option value="">-- Select account --</option>
            @foreach (var a in _accounts)
            {
                <option value="@a.Id">@a.Name (@a.Balance.ToString("C"))</option>
            }
        </select>

        <input type="number" step="0.01" @bind="DepositModel.Amount" placeholder="Amount" class="form-control mb-2" />
        <button @onclick="DoDeposit" disabled="@(!CanDeposit)" class="btn btn-success">Deposit</button>
    </div>

    <hr />
    <div class="transaction-section mb-4">
        <h4>Withdraw</h4>

        <select @bind="WithdrawModel.AccountId" class="form-select mb-2">
            <option value="">-- Select account --</option>
            @foreach (var a in _accounts)
            {
                <option value="@a.Id">@a.Name (@a.Balance.ToString("C"))</option>
            }
        </select>

        <input type="number" step="0.01" @bind="WithdrawModel.Amount" placeholder="Amount" class="form-control mb-2" />
        <button @onclick="DoWithdraw" disabled="@(!CanWithdraw)" class="btn btn-warning">Withdraw</button>
    </div>
    <hr/>
    <div class="transaction-section mb-4">
       
        <h4>Transfer</h4>

        <select @bind="Model.FromAccountId" class="form-select mb-2">
            <option value="">-- From account --</option>
            @foreach (var a in _accounts)
            {
                <option value="@a.Id">@a.Name (@a.Balance.ToString("C"))</option>
            }
        </select>

        <select @bind="Model.ToAccountId" class="form-select mb-2">
            <option value="">-- To account --</option>
            @foreach (var a in _accounts)
            {
                <option value="@a.Id">@a.Name (@a.Balance.ToString("C"))</option>
            }
        </select>

        <input type="number" step="0.01" @bind="Model.Amount" placeholder="Amount" class="form-control mb-2" />
        <button @onclick="DoTransfer" disabled="@(!CanTransfer)" class="btn btn-primary">Transfer</button>
    </div>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger mt-3">@Error</div>
    }

    @if (!string.IsNullOrEmpty(Success))
    {
        <div class="alert alert-success mt-3">@Success</div>
    }
}

@code {
    private List<BankAccount>? _accounts;
    private User? _currentUser;

    private string? Error;
    private string? Success;

    private readonly TransferFormModel Model = new();
    private readonly DepositFormModel DepositModel = new();
    private readonly WithdrawFormModel WithdrawModel = new();

    private bool CanTransfer =>
        Model.FromAccountId != Guid.Empty &&
        Model.ToAccountId != Guid.Empty &&
        Model.FromAccountId != Model.ToAccountId &&
        Model.Amount > 0;

    private bool CanDeposit =>
     DepositModel.AccountId != Guid.Empty && DepositModel.Amount > 0;

    private bool CanWithdraw =>
        WithdrawModel.AccountId != Guid.Empty && WithdrawModel.Amount > 0;

    public class WithdrawFormModel
    {
        public Guid AccountId { get; set; }
        public decimal Amount { get; set; }
    }
    public class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
    }
    public class DepositFormModel
    {
        public Guid AccountId { get; set; }
        public decimal Amount { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        _currentUser = await SignInService.GetCurrentUserAsync();

        if (_currentUser == null)
        {
            Error = "Please sign in first.";
            return;
        }

        _accounts = _currentUser.Accounts ?? new List<BankAccount>();
    }

    private async Task DoTransfer()
    {
        try
        {
            var from = _accounts?.FirstOrDefault(a => a.Id == Model.FromAccountId);
            var to = _accounts?.FirstOrDefault(a => a.Id == Model.ToAccountId);

            if (from == null)
                throw new Exception("Source account not found.");

            if (to == null)
                throw new Exception("Destination account not found.");

            if (Model.Amount > from.Balance)
                throw new Exception("Insufficient funds in source account.");

            // Log to debug
            Console.WriteLine($"Transferring from {from.Id} to {to.Id} amount {Model.Amount}");

            await AccountService.TransferAsync(from.Id, to.Id, Model.Amount, "Manual transfer");

            from.Balance -= Model.Amount;
            to.Balance += Model.Amount;

            Success = $"Transferred {Model.Amount:C} from {from.Name} to {to.Name}.";
            Error = null;
            Model.Amount = 0;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Success = null;
            Console.WriteLine($"Transfer error: {ex}");
        }
    }
    // ✅ Deposit Logic
    private async Task DoDeposit()
    {
        try
        {
            var account = _accounts?.FirstOrDefault(a => a.Id == DepositModel.AccountId);
            if (account == null) throw new Exception("Account not found.");

            await AccountService.DepositAsync(account.Id, DepositModel.Amount, "Manual deposit");
            account.Balance += DepositModel.Amount;

            Success = $"Deposited {DepositModel.Amount:C} to {account.Name}.";
            Error = null;
            DepositModel.Amount = 0;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Success = null;
            Console.WriteLine($"Deposit error: {ex}");
        }
    }
    private async Task DoWithdraw()
    {
        try
        {
            var account = _accounts?.FirstOrDefault(a => a.Id == WithdrawModel.AccountId);
            if (account == null) throw new Exception("Account not found.");
            if (WithdrawModel.Amount > account.Balance)
                throw new Exception("Insufficient funds.");

            await AccountService.WithdrawAsync(account.Id, WithdrawModel.Amount, "Manual withdrawal");
            account.Balance -= WithdrawModel.Amount;

            Success = $"Withdrew {WithdrawModel.Amount:C} from {account.Name}.";
            Error = null;
            WithdrawModel.Amount = 0;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Success = null;
            Console.WriteLine($"Withdraw error: {ex}");
        }
    }

}
