@page "/"
@inject ISignInService SignInService



@if (currentUser == null)
{
    <div class="text-center mt-5">
        <h4>Please sign in to view your accounts.</h4>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="fw-bold">Welcome, @currentUser.Username 👋</h2>
                <p class="text-muted">Access & manage your accounts and transactions efficiently.</p>
            </div>
            <div>
                <span class="badge bg-primary fs-6 px-3 py-2">
                    Total Balance: $@totalBalance
                </span>
            </div>
        </div>
        //TODO fix Balance display
        <!-- Bank Accounts Section -->
        <div class="row mb-4">
            <h4>My Accounts</h4>
            @if (currentUser.Accounts != null && currentUser.Accounts.Any())
            {
                @foreach (var account in currentUser.Accounts)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card shadow-sm border-0 rounded-3">
                            <div class="card-body">
                                <h5 class="card-title">@account.Name</h5>
                                <p class="text-muted">Account Number: @account.Id</p>
                                <h6 class="fw-bold text-success">Balance: $@account.Balance</h6>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No accounts found for this user.</p>
            }
        </div>

        <!-- Recent Transactions Section -->
        <div class="row">
            <h4>Recent Transactions</h4>
            @if (recentTransactions.Any())
            {
                <table class="table table-striped table-hover shadow-sm mt-2">
                    <thead class="table-light">
                        <tr>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Category</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var txn in recentTransactions)
                        {
                            <tr>
                                <td>@txn.Timestamp.ToShortDateString()</td>
                                <td>@txn.Description</td>
                                <td class="@(txn.Amount < 0 ? "text-danger" : "text-success")">
                                    $@txn.Amount
                                </td>
                                <td>
                                    <span class="badge bg-@(txn.Status == "Success" ? "success" : "secondary")">
                                        @txn.Status
                                    </span>
                                </td>
                                <td>@txn.Category</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No recent transactions available.</p>
            }
        </div>
    </div>
}

@code {
    private User? currentUser;
    private decimal totalBalance;
    private List<Transaction> recentTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await SignInService.GetCurrentUserAsync();

        if (currentUser != null)
        {
            totalBalance = currentUser.Accounts?.Sum(a => a.Balance) ?? 0;

            // Example mock transactions — replace with your real data later
            recentTransactions = new List<Transaction>
            {
                new Transaction { Timestamp = DateTime.Now.AddDays(-1), Description = "Starbucks", Amount = -4.50m, Status = "Success", Category = "Food & Drink" },
                new Transaction { Timestamp = DateTime.Now.AddDays(-2), Description = "Uber", Amount = -12.00m, Status = "Success", Category = "Transport" },
                new Transaction { Timestamp = DateTime.Now.AddDays(-3), Description = "Salary Deposit", Amount = 2000m, Status = "Success", Category = "Income" },
            };
        }

        // React to sign-in changes
        SignInService.OnChange += async () =>
       {
       currentUser = await SignInService.GetCurrentUserAsync();
       totalBalance = currentUser?.Accounts?.Sum(a => a.Balance) ?? 0;
       StateHasChanged();
       };

    }
}