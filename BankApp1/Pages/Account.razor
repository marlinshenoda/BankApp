@page "/accounts"
@using System.ComponentModel.DataAnnotations
@inject IAccountServices AccountServices


<h3>Create Account</h3>

<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="_model.Name" class="form-control" />
        <ValidationMessage For="@(() => _model.Name)" />

    </div>

    <div class="form-group">
        <label>Currency</label>
        <InputText @bind-Value="_model.Currency" class="form-control" />
        <ValidationMessage For="@(() => _model.Currency)" />
        <ValidationMessage For="@(() => _model.InitialBalance)" />

    </div>

    <div class="form-group">
        <label>Initial Balance</label>
        <InputNumber @bind-Value="_model.InitialBalance" class="form-control" />
        <ValidationMessage For="@(() => _model.InitialBalance)" />

    </div>

    <div class="form-group">
        <label>Account Type</label>
        <InputSelect @bind-Value="_model.AccountType" class="form-select">
            <option value="0">Deposit</option>
            <option value="1">Savings</option>
            <option value="2">Checking</option>
        </InputSelect>
        <ValidationMessage For="@(() => _model.AccountType)" />

    </div>

    <button type="submit" class="btn btn-success mt-2">Create Account</button>
</EditForm>

<hr />

<h3>Accounts</h3>

@if (accounts == null || !accounts.Any())
{
    <p>No accounts yet.</p>
}
else
{
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Name</th>
                <th>Currency</th>
                <th>Balance</th>
                <th>Last Updated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var acc in accounts)
            {
                <tr>
                    <td>@acc.Name</td>
                    <td>@acc.Currency</td>
                    <td>@acc.Balance</td>
                    <td>@acc.LastUpdated</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private  createAccountModel _model = new();
    private IEnumerable<IBankAccount> accounts;

    private Task CreateAccountAsync()
    {
        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            Console.WriteLine("Name is required.");
            return Task.CompletedTask;
        }

        // Create the new account via the service
        AccountServices.CreateAccount(_model.Name, _model.Currency, _model.InitialBalance,_model.AccountType);

        // Refresh the list
        accounts = AccountServices.GetAllAccounts();

        // Clear input fields
        _model = new();

        return Task.CompletedTask;
    }


    protected override void OnInitialized()
    {
        accounts = AccountServices.GetAllAccounts();
    }
    public class createAccountModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string? Name{ get; set; }

        [Required(ErrorMessage = "Account Type is required.")]
        public AccountType AccountType{ get; set; }

        [Required(ErrorMessage = "Currency is required.")]
        public string? Currency { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Balance cannot be negative.")]
        public decimal InitialBalance { get; set; } = 0;

        public void Clear()
        {
            Name = string.Empty;
            AccountType = AccountType.Deposit;
            Currency = string.Empty;
            InitialBalance = 0;
        }

    }
}
